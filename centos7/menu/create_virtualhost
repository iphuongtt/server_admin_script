#!/bin/bash
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White

if [ -f /etc/nginx/nginx.conf ]; then
  echo -e "${BRed}ERROR: NGINX does not installed${Color_Off}"
  read -p "Press enter to continue"
  exit;
fi

checkdomain()
{
if [ -d "$1" ]; then
  echo -e "${BRed}ERROR: Directory does not exists${Color_Off}"
  read -p "Press enter to continue"
  exit;
fi
}

php()
{
echo -n "Port: "
read port

echo -n "Domain Name: "
read domainName

#fileConfigName=`$domainName | sed -r 's/(^|_|\s)([a-z])/\U\2/g'`
fileConfigName="${domainName}.conf"

if [ -f /etc/nginx/sites-enabled/$fileConfigName ]; then
	read -p "Domain Name $domainName already exists. Do you want to remove?:  " -n 1 -r
	if [[ $REPLY =~ ^[Yy]$ ]]; then
		rm -rf /etc/nginx/sites-enabled/$fileConfigName
		rm -rf /etc/nginx/sites-available/$fileConfigName
	else
		read -p "Press enter to continue"
		server-admin
	fi 
fi


echo -n "Root Directory: "
read rootDirectory

checkdomain $rootDirectory

read -p "Do you want to setup SSL?:  " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]; then
	echo -n "Port SSL: "
	read portSSL

	cat > "etc/nginx/sites-available/${fileConfigName}" <<END
# Choose between www and non-www, listen on the *wrong* one and redirect to
# the right one -- http://wiki.nginx.org/Pitfalls#Server_Name
#
server {
  listen [::]:${port};
  listen ${port};

  # listen on both hosts
  server_name ${domainName} www.${domainName};

  # and redirect to the https host (declared below)
  # avoiding http://www -> https://www -> https:// chain.
  return 301 https://${domainName}\$request_uri;
}

server {
  listen [::]:${portSSL} ssl http2;
  listen ${portSSL} ssl http2;

  # listen on the wrong host
  server_name www.${domainName};

  include h5bp/directive-only/ssl.conf;

  # and redirect to the non-www host (declared below)
  return 301 https://${domainName}\$request_uri;
}

server {

  # listen [::]:${portSSL} ssl http2 accept_filter=dataready;  # for FreeBSD
  # listen ${portSSL} ssl http2 accept_filter=dataready;  # for FreeBSD
  # listen [::]:${portSSL} ssl http2 deferred;  # for Linux
  # listen ${portSSL} ssl http2 deferred;  # for Linux
  listen [::]:${portSSL} ssl http2;
  listen ${portSSL} ssl http2;

  # The host name to respond to
  server_name ${domainName};

  include h5bp/directive-only/ssl.conf;

  # Path for static files
  root /var/www/${domainName}/public;

  #Specify a charset
  charset utf-8;

  # Custom 404 page
  error_page 404 /404.html;

  # Include the basic h5bp config set
  include h5bp/basic.conf;
}
END
else
	cat > "/etc/nginx/sites-available/${fileConfigName}" <<END
	# www to non-www redirect -- duplicate content is BAD:
	# https://github.com/h5bp/html5-boilerplate/blob/5370479476dceae7cc3ea105946536d6bc0ee468/.htaccess#L362
	# Choose between www and non-www, listen on the *wrong* one and redirect to
	# the right one -- http://wiki.nginx.org/Pitfalls#Server_Name
	server {
	  # don't forget to tell on which port this server listens
	  listen [::]:${port};
	  listen ${port};

	  # listen on the www host
	  server_name www.${domainName};

	  # and redirect to the non-www host (declared below)
	  return 301 \$scheme://${domainName}\$request_uri;
	}

	server {
	  # listen [::]:${port} accept_filter=httpready; # for FreeBSD
	  # listen ${port} accept_filter=httpready; # for FreeBSD
	  # listen [::]:${port} deferred; # for Linux
	  # listen ${port} deferred; # for Linux
	  listen [::]:${port};
	  listen ${port};

	  # The host name to respond to
	  server_name ${domainName};

	  # Path for static files
	  root ${rootDirectory};

	  # Specify a charset
	  charset utf-8;

	  # Custom 404 page
	  error_page 404 /404.html;
	  error_page 500 502 503 504 /50x.html;

	  location ~ \.php\$ {
	    try_files \$uri =404;
	    fastcgi_pass unix:/var/run/php-fpm/php-fpm.sock;
	    fastcgi_index index.php;
	    fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
	    include fastcgi_params;
		}

	  # Include the basic h5bp config set
	  include h5bp/basic.conf;
	}
END
	ln -s /etc/nginx/sites-available/$fileConfigName /etc/nginx/sites-enabled/$fileConfigName
fi 
systemctl restart nginx
if [[ $? -ne 0 ]]; then
	echo "========================================================="
	echo -e "||||     ${BRed}ERRR:${Color_Off}     ||||"
	echo "========================================================="
	systemctl status nginx
	read -p "Press enter to continue"
	server-admin
else
	echo "========================================================="
	echo -e "||||     \e[0;34m CREATE VIRTUAL HOST SUCCESSFUL \e[0m     ||||"
	echo "========================================================="
	read -p "Press enter to continue"
	server-admin
fi
}




clear
prompt="Which type virtual host do you want to create:"
options=("PHP application" "Angular application" "SPA with PHP and Angular or ReactJs application") # End Options

PS3="
$prompt"
select opt in "${options[@]}" "Exit"; do 

    case "$REPLY" in
	    1 ) php; break;;
		2 ) angular; break;;
		3 ) spa; break;;
	    # End Menu
	    $(( ${#options[@]}+1 )) ) printf "\nBye\n\n"; break;;
	    *) echo "Please, chose again";continue;;

    esac

done

